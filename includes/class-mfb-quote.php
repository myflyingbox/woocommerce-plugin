<?php
/**
 * MFB_Quote
 *
 * Quote saved from API response, with corresponding offers.
 *
 */

class MFB_Quote {

	public $id = 0;
	public $api_quote_uuid = 0;

	public $offers = array();
	public $post = null;

	// Stores the shipper/receiver params used for this quote
	public $params = array();

	// Memorize the content of the cart (product id and quantity) to be
	// able to detect if a quote is still valid or not based on cart data
	public $cart_content = array();

	public $shipment_id = null; // Used when a quote is generated by a shipment.

	public function __construct() {

	}

	public static function get( $quote_id ) {

		if ( is_numeric( $quote_id ) ) {
			$instance = new self();
			$instance->id   = absint( $quote_id );
			$instance->post = get_post( $instance->id );
			$instance->shipment_id = $instance->post->post_parent;
			$instance->populate();

			return $instance;

		} else {

			return false;
		}

	}

	public function populate() {
		$this->api_quote_uuid = get_post_meta( $this->id, '_api_uuid', true );
		$this->params         = get_post_meta( $this->id, '_params', true );
		$this->cart_content   = get_post_meta( $this->id, '_cart_content', true );


		// Loading offers
		foreach ( MFB_Offer::get_all_for_quote( $this->id ) as $offer) {
			$this->offers[$offer->product_code] = $offer;
		}

	}

	public static function get_all() {

		$all_quotes = get_posts( array(
			'posts_per_page'=> -1,
			'post_type' 	=> 'mfb_quote',
			'post_status' => 'private',
			'field' => 'ids',
			'orderby'  => array( 'date' => 'DESC' )
		));

		$quotes = array();

		foreach($all_quotes as $quote) {
			$quotes[] = self::get($quote->ID);
		}

		return $quotes;
	}

	public function save() {
		// ID equal to zero, this is a new record
		if ($this->id == 0) {
			$quote = array(
				'post_type' => 'mfb_quote',
				'post_status' => 'private',
				'ping_status' => 'closed',
				'comment_status' => 'closed',
				'post_author' => 1,
				'post_password' => uniqid( 'quote_' ),
				'post_title' => $this->api_quote_uuid
			);
			if ( $this->shipment_id ) $quote['post_parent'] = $this->shipment_id;

			$this->id = wp_insert_post( $quote, true );

			update_post_meta( $this->id, '_api_uuid',             $this->api_quote_uuid );
			update_post_meta( $this->id, '_params',               $this->params );
			update_post_meta( $this->id, '_cart_content',         $this->cart_content );

			$this->post = get_post( $this->id );
		}
		// Reloading object
		$this->populate();
		return true;
	}
}
